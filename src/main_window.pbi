;  * CRYPTOR;  *;  * main_window.pbi;  *;- workaround for MenuItem() and #PB_AnyEnumeration 11  #MNU_FILE_NEW  #MNU_FILE_OPEN  #MNU_FILE_SAVE  #MNU_FILE_SAVEAS  #MNU_FILE_ENC_SAVE  #MNU_FILE_ENC_SAVEAS  #MNU_FILE_PRINT  #MNU_FILE_CLOSE  #MNU_FILE_QUIT  #MNU_HELP_ABOUTEndEnumeration;- main window imagesStructure MAIN_WINDOW_IMAGES  app.i  show.i  hide.i  web.i  copy.i  makepwd.i  locked.i  unlocked.i  new.i  open.i  close.i  save.i  save_as_xml.i  save_as_enc.i  print.i  quit.i  about.iEndStructure;- main window menu structureStructure MAIN_WINDOW_MENU  id.i  file_new.i  file_open.i  file_save.i  file_save_as.i  file_encrypted_save_as.i  file_print.i  file_close.i  file_quit.i  help_about.iEndStructure;- main window structureStructure MAIN_WINDOW  id.i  mnu.MAIN_WINDOW_MENU  stb.i  lst.i  cnt.i  scr.i  txt_company.i  str_company.i  txt_address.i  str_address.i  txt_username.i  str_username.i  txt_email.i  str_email.i  txt_password.i  str_password.i  txt_password2.i  str_password2.i  txt_comment.i  str_comment.i  btn_show.i  btn_web.i  btn_copy_pass.i  btn_copy_name.i  btn_copy_mail.i  btn_make.i  btn_new.i  btn_edit.i  btn_save.i  btn_del.i  img.MAIN_WINDOW_IMAGESEndStructure; only for testing purposes, leave commented; Global v_main_window.MAIN_WINDOW ;: InitializeStructure(@v_main_window, MAIN_WINDOW);- macrosMacro _main_window_clear_data(ptr)  SetGadgetText(ptr\str_address,   "")  SetGadgetText(ptr\str_comment,   "")  SetGadgetText(ptr\str_company,   "")  SetGadgetText(ptr\str_email,     "")  SetGadgetText(ptr\str_password,  "")  SetGadgetText(ptr\str_password2, "")  SetGadgetText(ptr\str_username,  "")EndMacroMacro _main_window_enable_data(ptr)  DisableGadget(ptr\str_address,   #False)  ;DisableGadget(ptr\str_comment,   #False) ; this doesn't work for the edit gadget  SetGadgetAttribute(ptr\str_comment, #PB_Editor_ReadOnly, 0)  DisableGadget(ptr\str_company,   #False)  DisableGadget(ptr\str_email,     #False)  DisableGadget(ptr\str_password,  #False)  DisableGadget(ptr\str_password2, #False)  DisableGadget(ptr\str_username,  #False)  DisableGadget(ptr\btn_make,      #False)  SetActiveGadget(ptr\str_company)EndMacroMacro _main_window_disable_data(ptr)  DisableGadget(ptr\str_address,   #True)  ;DisableGadget(ptr\str_comment,   #True) ; this doesn't work for the edit gadget  SetGadgetAttribute(ptr\str_comment, #PB_Editor_ReadOnly, 1)  DisableGadget(ptr\str_company,   #True)  DisableGadget(ptr\str_email,     #True)  DisableGadget(ptr\str_password,  #True)  DisableGadget(ptr\str_password2, #True)  DisableGadget(ptr\str_username,  #True)  DisableGadget(ptr\btn_make,      #True)  SetGadgetColor(ptr\str_address,   #PB_Gadget_BackColor, #PB_Default)  SetGadgetColor(ptr\str_comment,   #PB_Gadget_BackColor, #PB_Default)  SetGadgetColor(ptr\str_company,   #PB_Gadget_BackColor, #PB_Default)  SetGadgetColor(ptr\str_email,     #PB_Gadget_BackColor, #PB_Default)  SetGadgetColor(ptr\str_password,  #PB_Gadget_BackColor, #PB_Default)  SetGadgetColor(ptr\str_password2, #PB_Gadget_BackColor, #PB_Default)  SetGadgetColor(ptr\str_username,  #PB_Gadget_BackColor, #PB_Default)  SetActiveGadget(ptr\lst)EndMacroMacro _main_window_create_tooltips(ptr)  GadgetToolTip(ptr\btn_web, "Starts yout internet browser with this web address.")  GadgetToolTip(ptr\btn_show, "Show the real password in the input boxes or show only dots.")  GadgetToolTip(ptr\btn_copy_name, "Copy the username to the clipboard.")  GadgetToolTip(ptr\btn_copy_mail, "Copy the email address to the clipboard.")  GadgetToolTip(ptr\btn_copy_pass, "Copy the password to the clipboard.")  GadgetToolTip(ptr\btn_make, "Generate a strong password.")EndMacro;- function declarationsDeclare main_window_load_icons ( *img.MAIN_WINDOW_IMAGES )Declare main_window_set_list( List d.DATASET() , *w.MAIN_WINDOW )Declare main_window_get_dataset( List d.DATASET() , *w.MAIN_WINDOW )Declare main_window_set_dataset( List d.DATASET() , *w.MAIN_WINDOW )Declare main_window_new_dataset( List d.DATASET() , *w.MAIN_WINDOW )Declare main_window_edit_dataset( List d.DATASET() , *w.MAIN_WINDOW )Declare main_window_save_dataset( List d.DATASET() , *w.MAIN_WINDOW )Declare main_window_delete_dataset( List d.DATASET() , *w.MAIN_WINDOW )Declare main_window_gadget_event_cb() ; this is the callback for nicier input gadgetsDeclare main_window_resize( *w.MAIN_WINDOW ) ; unsure if needed in future;- the main windowProcedure.i main_window_open( *w.MAIN_WINDOW )    Protected.l flags, n    ;-- set window flags  flags = #PB_Window_MinimizeGadget ; #PB_Window_SizeGadget    With *w        If IsWindow(\id)      warn("main window already open")      ProcedureReturn 0    EndIf        main_window_load_icons(*w\img)        ;-- create window    \id = OpenWindow(#PB_Any, #PB_Ignore, #PB_Ignore, #APP_WINDOW_WIDTH, #APP_WINDOW_HEIGHT, #APP_NAME, #PB_Window_SystemMenu|#PB_Window_Invisible|flags)    If IsWindow(\id)            ;--- create menu      \mnu\id = CreateImageMenu(#PB_Any, WindowID(\id))      If IsMenu(\mnu\id)                \mnu\file_new               = #MNU_FILE_NEW        \mnu\file_open              = #MNU_FILE_OPEN        \mnu\file_save              = #MNU_FILE_SAVE        \mnu\file_save_as           = #MNU_FILE_SAVEAS        \mnu\file_encrypted_save_as = #MNU_FILE_ENC_SAVEAS        \mnu\file_print             = #MNU_FILE_PRINT        \mnu\file_close             = #MNU_FILE_CLOSE        CompilerIf #PB_Compiler_OS = #PB_OS_MacOS          \mnu\file_quit = #PB_Menu_Quit          \mnu\help_about = #PB_Menu_About        CompilerElse          \mnu\file_quit = #MNU_FILE_QUIT          \mnu\help_about = #MNU_HELP_ABOUT        CompilerEndIf                MenuTitle("File")        MenuItem(\mnu\file_new, "New", ImageID(\img\new))        MenuBar()        MenuItem(\mnu\file_open, "Open" + "...", ImageID(\img\open))        MenuBar()        MenuItem(\mnu\file_save, "Save", ImageID(\img\save))        ; -------------------------------        ; remove it in final version        MenuItem(\mnu\file_save_as, "Save as XML" + "...", ImageID(\img\save_as_xml))        ; -------------------------------        MenuItem(\mnu\file_encrypted_save_as, "Save as enctrypted" + "...", ImageID(\img\save_as_enc))        MenuBar()        MenuItem(\mnu\file_print, "Print" + "...", ImageID(\img\print))        MenuBar()        MenuItem(\mnu\file_close, "Close", ImageID(\img\close))                CompilerIf #PB_Compiler_OS = #PB_OS_MacOS          MenuItem(\mnu\file_quit, "Quit")          MenuItem(\mnu\help_about, "About" + Space(1) + #APP_NAME)        CompilerElse          MenuBar()          MenuItem(\mnu\file_quit, "Quit", ImageID(\img\quit))          MenuTitle("Help")          MenuItem(\mnu\help_about, "About" + Space(1) + #APP_NAME, ImageID(\img\about))        CompilerEndIf              Else        warn("can't create menu")        CloseWindow(\id)        ProcedureReturn 0      EndIf            ;--- create statusbar      \stb = CreateStatusBar(#PB_Any, WindowID(\id))      If IsStatusBar(\stb)        AddStatusBarField(30)        AddStatusBarField(#PB_Ignore)      Else        warn("can't create statusbar")        CloseWindow(\id)        ProcedureReturn 0      EndIf            ;--- create list      \lst = ListViewGadget(#PB_Any, 10, 10, 200, WindowHeight(\id) - MenuHeight() - StatusBarHeight(\stb) - 20)            ;--- here begins the container      \cnt = ContainerGadget(#PB_Any, GadgetX(\lst) + GadgetWidth(\lst) + 10, 10, WindowWidth(\id) - GadgetWidth(\lst) - 30, GadgetHeight(\lst))      ;---- here begins the scroll area      \scr = ScrollAreaGadget(#PB_Any, 5, 5, GadgetWidth(\cnt)-10, GadgetHeight(\cnt) - #APP_BUTTON_HEIGHT - 20, GadgetWidth(\cnt)-40, GadgetHeight(\cnt)-#APP_BUTTON_HEIGHT*2, 10)            Protected.l w_cnt = GadgetWidth(\cnt)-40      \txt_company   = TextGadget(#PB_Any,     0,   5, w_cnt,   20, "Company or Website name" + ":", #PB_Text_Center)            Protected.l w_txt_c = GadgetWidth(\txt_company)-10      \str_company   = StringGadget(#PB_Any,  10,  40, w_txt_c, 20, "")      w_txt_c = GadgetWidth(\txt_company)-150            \txt_address   = TextGadget(#PB_Any,    10,  70, 140,     20, "Homepage" + ":")      \str_address   = StringGadget(#PB_Any, 150,  70, w_txt_c-50, 20, "")            \txt_username  = TextGadget(#PB_Any,    10, 100, 140,     20, "Username" + ":")      \str_username  = StringGadget(#PB_Any, 150, 100, w_txt_c-50, 20, "")            \txt_email     = TextGadget(#PB_Any,    10, 130, 140,     20, "E-Mail" + ":")      \str_email     = StringGadget(#PB_Any, 150, 130, w_txt_c-50, 20, "")            \txt_password  = TextGadget(#PB_Any,    10, 160, 140,     20, "Password" + ":")      \str_password  = StringGadget(#PB_Any, 150, 160, w_txt_c-100, 20, "", #PB_String_Password)            \txt_password2 = TextGadget(#PB_Any,    10, 190, 140,     20, "retype " + "Password" + ":")      \str_password2 = StringGadget(#PB_Any, 150, 190, w_txt_c-100, 20, "", #PB_String_Password)            \txt_comment   = TextGadget(#PB_Any,    10, 220, w_cnt,   20, "Comments" + ":")            w_txt_c = GadgetWidth(\txt_company)-10      \str_comment   = EditorGadget(#PB_Any,  10, 250, w_txt_c, 120, #PB_Editor_WordWrap)            \btn_web = ButtonImageGadget(#PB_Any, GadgetX(\str_address)+GadgetWidth(\str_address)+15, GadgetY(\str_address)-2, 24, 24, ImageID(\img\web))            \btn_copy_name = ButtonImageGadget(#PB_Any, GadgetX(\str_username)+GadgetWidth(\str_username)+15, GadgetY(\str_username)-2, 24, 24, ImageID(\img\copy))      \btn_copy_mail = ButtonImageGadget(#PB_Any, GadgetX(\str_email)+GadgetWidth(\str_email)+15, GadgetY(\str_email)-2, 24, 24, ImageID(\img\copy))            \btn_copy_pass = ButtonImageGadget(#PB_Any, GadgetX(\str_password)+GadgetWidth(\str_password)+15, GadgetY(\str_password)-2, 24, 24, ImageID(\img\copy))      \btn_make      = ButtonImageGadget(#PB_Any, GadgetX(\str_password)+GadgetWidth(\str_password)+15, GadgetY(\str_password2)-2, 24, 24, ImageID(\img\makepwd))            \btn_show      = ButtonImageGadget(#PB_Any, GadgetX(\str_password)+GadgetWidth(\str_password)+55, GadgetY(\str_password), 45, 50, 0, #PB_Button_Toggle)      SetGadgetAttribute(\btn_show, #PB_Button_Image, ImageID(\img\show))      SetGadgetAttribute(\btn_show, #PB_Button_PressedImage, ImageID(\img\hide))      SetGadgetState(\btn_show, #True)            CloseGadgetList()      ;---- end of scroll area      ;--- here we are back in the container       \btn_del = ButtonGadget(#PB_Any, 10, GadgetY(\scr) + GadgetHeight(\scr) + 10, #APP_BUTTON_WIDTH, #APP_BUTTON_HEIGHT, "Delete Dataset")            \btn_new = ButtonGadget(#PB_Any, GadgetWidth(\cnt) - #APP_BUTTON_WIDTH - 10, GadgetY(\scr) + GadgetHeight(\scr) + 10, #APP_BUTTON_WIDTH, #APP_BUTTON_HEIGHT, "New Dataset")      \btn_edit = ButtonGadget(#PB_Any, GadgetX(\btn_new) - #APP_BUTTON_WIDTH - 10, GadgetY(\scr) + GadgetHeight(\scr) + 10, #APP_BUTTON_WIDTH, #APP_BUTTON_HEIGHT, "Edit Dataset")      \btn_save = ButtonGadget(#PB_Any, GadgetX(\btn_edit) - #APP_BUTTON_WIDTH - 10, GadgetY(\scr) + GadgetHeight(\scr) + 10, #APP_BUTTON_WIDTH, #APP_BUTTON_HEIGHT, "Save Dataset")      CloseGadgetList()      ;--- container closed            ;--- generate tooltips      _main_window_create_tooltips(*w)            ;--- disable the string gadgets      _main_window_disable_data(*w)            DisableGadget(\btn_del, #True)      DisableGadget(\btn_edit, #True)      DisableGadget(\btn_save, #True)      DisableGadget(\btn_new, #True)            SetActiveGadget(\btn_new)            BindEvent(#PB_Event_Gadget, @main_window_gadget_event_cb(), \id)          Else      warn("can't create main window")      ProcedureReturn 0    EndIf      EndWith    ProcedureReturn *w\id  EndProcedure;- callback function for the string gadgetsProcedure main_window_gadget_event_cb()  Select EventType()    Case #PB_EventType_Focus      SetGadgetColor(EventGadget(), #PB_Gadget_BackColor, #APP_COLOR_HIGHLIGHT)    Case #PB_EventType_LostFocus      SetGadgetColor(EventGadget(), #PB_Gadget_BackColor, #PB_Default)  EndSelectEndProcedureProcedure main_window_button_event_cb()  EndProcedure;- additional needed functions for the windowProcedure main_window_resize( *w.MAIN_WINDOW )  EndProcedureProcedure main_window_set_list( List d.DATASET() , *w.MAIN_WINDOW )  Protected.l i = 0  With *w    If CountGadgetItems(\lst) > 0      ClearGadgetItems(\lst)    EndIf    SortStructuredList(d(), #PB_Sort_Ascending, OffsetOf(DATASET\company), #PB_String)    ForEach d()      AddGadgetItem(\lst, i, d()\company)      SetGadgetItemData(\lst, i, d()\id)      i+1    Next  EndWithEndProcedure; Procedure main_window_clear_dataset( List d.DATASET() , *w.MAIN_WINDOW );     With *w;       SetGadgetText(\str_address,   "");       SetGadgetText(\str_comment,   "");       SetGadgetText(\str_company,   "");       SetGadgetText(\str_email,     "");       SetGadgetText(\str_password,  "");       SetGadgetText(\str_password2, "");       SetGadgetText(\str_username,  "");     EndWith; EndProcedure; Procedure main_window_show_dataset( List d.DATASET() , *w.MAIN_WINDOW );   If ListSize(d()) > 0;     With *w;       SetGadgetText(\str_address,   d()\address);       SetGadgetText(\str_comment,   d()\comment);       SetGadgetText(\str_company,   d()\company);       SetGadgetText(\str_email,     d()\email);       SetGadgetText(\str_password,  d()\password);       SetGadgetText(\str_password2, d()\password2);       SetGadgetText(\str_username,  d()\username);     EndWith;   Else;     main_window_clear_dataset(d(), *w);   EndIf; EndProcedureProcedure main_window_delete_dataset( List d.DATASET() , *w.MAIN_WINDOW )  If ListSize(d()) > 0    DeleteElement(d(), 1)  EndIf  With *w    DisableGadget(\btn_new, #False)    If ListSize(d()) > 0      DisableGadget(\btn_del, #False)      DisableGadget(\btn_edit, #False)    Else      DisableGadget(\btn_del, #True)      DisableGadget(\btn_edit, #True)    EndIf    DisableGadget(\btn_save, #True)  EndWith  main_window_set_dataset(d(), *w)  _main_window_disable_data(*w)  main_window_set_list(d(), *w)EndProcedureProcedure main_window_save_dataset( List d.DATASET() , *w.MAIN_WINDOW )  With *w    DisableGadget(\btn_new, #False)    DisableGadget(\btn_del, #False)    DisableGadget(\btn_edit, #False)    DisableGadget(\btn_save, #True)  EndWith  main_window_get_dataset(d(), *w)  main_window_set_list(d(), *w)  _main_window_disable_data(*w)EndProcedureProcedure main_window_edit_dataset( List d.DATASET() , *w.MAIN_WINDOW )  With *w    DisableGadget(\btn_new, #True)    DisableGadget(\btn_del, #True)    DisableGadget(\btn_edit, #True)    DisableGadget(\btn_save, #False)  EndWith  _main_window_enable_data(*w)  SetGadgetData(*w\str_company, d()\Id)EndProcedureProcedure main_window_new_dataset( List d.DATASET() , *w.MAIN_WINDOW )  With *w    DisableGadget(\btn_new, #True)    DisableGadget(\btn_del, #True)    DisableGadget(\btn_edit, #True)    DisableGadget(\btn_save, #False)  EndWith  _main_window_enable_data(*w)  _main_window_clear_data(*w)  ;SetGadgetData(*w\str_company, ListSize(d()))  SetGadgetData(*w\str_company, -1)  ;main_window_clear_dataset(d(), *w)EndProcedureProcedure main_window_get_dataset( List d.DATASET() , *w.MAIN_WINDOW )  Protected.l data_exist = GetGadgetData(*w\str_company)  With *w    If data_exist = -1      AddElement(d())      d()\id = ListSize(d())    Else      ForEach d()        If d()\Id = data_exist          Break        EndIf      Next    EndIf    d()\address   = GetGadgetText(\str_address)    d()\comment   = GetGadgetText(\str_comment)    d()\company   = GetGadgetText(\str_company)    d()\email     = GetGadgetText(\str_email)    d()\password  = GetGadgetText(\str_password)    d()\password2 = GetGadgetText(\str_password2)    d()\username  = GetGadgetText(\str_username)  EndWithEndProcedureProcedure main_window_set_dataset( List d.DATASET() , *w.MAIN_WINDOW )  ;main_window_clear_dataset(d(), *w)  _main_window_clear_data(*w)  With *w    SetGadgetText(\str_address,   d()\address)    SetGadgetText(\str_comment,   d()\comment)    SetGadgetText(\str_company,   d()\company)    SetGadgetText(\str_email,     d()\email)    SetGadgetText(\str_password,  d()\password)    SetGadgetText(\str_password2, d()\password2)    SetGadgetText(\str_username,  d()\username)  EndWithEndProcedureProcedure main_window_switch_pwd_gadgets( *w.MAIN_WINDOW , state.b , disabled.b )  Protected.l x1, y1, w, h, x2, y2  Protected.s t1, t2  With *w    x1 = GadgetX(\str_password)    y1 = GadgetY(\str_password)    w  = GadgetWidth(\str_password)    h  = GadgetHeight(\str_password)    x2 = GadgetX(\str_password2)    y2 = GadgetY(\str_password2)    t1 = GetGadgetText(\str_password)    t2 = GetGadgetText(\str_password2)    FreeGadget(\str_password)    FreeGadget(\str_password2)    OpenGadgetList(\scr)    If state      \str_password  = StringGadget(#PB_Any, x1, y1, w, h, t1)      \str_password2 = StringGadget(#PB_Any, x2, y2, w, h, t2)    Else      \str_password  = StringGadget(#PB_Any, x1, y1, w, h, t1, #PB_String_Password)      \str_password2 = StringGadget(#PB_Any, x2, y2, w, h, t2, #PB_String_Password)    EndIf    DisableGadget(\str_password,  disabled)    DisableGadget(\str_password2, disabled)    t1 = #Null$ : t2 = #Null$    CloseGadgetList()  EndWithEndProcedureProcedure main_window_load_icons ( *img.MAIN_WINDOW_IMAGES )  With *img    \app          = CatchImage(#PB_Any, ?ICON_APP)    \hide         = CatchImage(#PB_Any, ?ICON_HIDE)    \show         = CatchImage(#PB_Any, ?ICON_SHOW)    \web          = CatchImage(#PB_Any, ?ICON_WEB)    \copy         = CatchImage(#PB_Any, ?ICON_COPY)    \makepwd      = CatchImage(#PB_Any, ?ICON_MAKEPWD)    \new          = CatchImage(#PB_Any, ?ICON_NEW)    \open         = CatchImage(#PB_Any, ?ICON_OPEN)    \save         = CatchImage(#PB_Any, ?ICON_SAVE)    \save_as_xml  = CatchImage(#PB_Any, ?ICON_SAVEAS)    \save_as_enc  = CatchImage(#PB_Any, ?ICON_SAVEAS_ENC)    \close        = CatchImage(#PB_Any, ?ICON_CLOSE)    \print        = CatchImage(#PB_Any, ?ICON_PRINT)    \quit         = CatchImage(#PB_Any, ?ICON_QUIT)    \about        = CatchImage(#PB_Any, ?ICON_ABOUT)  EndWithEndProcedure; IDE Options = PureBasic 5.72 (Windows - x64); CursorPosition = 137; FirstLine = 90; Folding = 5---; EnableXP; UseMainFile = main.pb; CompileSourceDirectory; EnablePurifier; EnableCompileCount = 0; EnableBuildCount = 0; EnableExeConstant