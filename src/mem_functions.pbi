;  * CRYPTOR;  *;  * mem_functions.pbi;  *Macro clear_mem( memory , size = #APP_BYTE_SIZE )  FillMemory(memory, size)EndMacroProcedure.i string_to_mem( string.s , *mem )    Protected.i i  Protected.s s    If Len(string) = 0    info("empty string")    ProcedureReturn 0  EndIf    s = StringFingerprint(string, #PB_Cipher_MD5)    If Len(s) <> 32    info("can't create valid key string")    ProcedureReturn 0  EndIf    If *mem = 0    warn("memory isn't allocated")    ProcedureReturn 0  EndIf    For i = 0 To 15    PokeB(*mem + i, Val("$"+Mid(s, i*2+1, 2)))  Next    ProcedureReturn @*mem  EndProcedureProcedure.i check_file( filename$ )    If FileSize(filename$) < 0    warn("The file '" + filename$ + "' didn't exist.")    ProcedureReturn 0  EndIf    Protected.i h_file = ReadFile(#PB_Any, filename$)  If IsFile(h_file)        Protected num.l, i.l, b.b, *defvec, *vec        *defvec = AllocateMemory(#APP_BYTE_SIZE)    *vec = AllocateMemory(#APP_BYTE_SIZE)        string_to_mem(#APP_DEFAULT_VECTOR, *defvec)        FileSeek(h_file, 0)    num = ReadLong(h_file)    ReadData(h_file, *vec, #APP_BYTE_SIZE)        CloseFile(h_file)        If num = #APP_EXT_L And CompareMemory(*defvec, *vec, #APP_BYTE_SIZE)      FreeMemory(*defvec) : FreeMemory(*vec)      ProcedureReturn #APP_DATA_ENCODED    Else      FreeMemory(*defvec) : FreeMemory(*vec)      ProcedureReturn #APP_DATA_XML    EndIf      Else    warn("Can't open the file '" + filename$ + "'.")    ProcedureReturn 0  EndIf    ProcedureReturn 0  EndProcedure; IDE Options = PureBasic 5.72 (Windows - x64); CursorPosition = 68; FirstLine = 40; Folding = -; EnableXP; UseMainFile = main.pb; CompileSourceDirectory; EnablePurifier; EnableCompileCount = 0; EnableBuildCount = 0; EnableExeConstant