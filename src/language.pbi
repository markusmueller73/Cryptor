;  * CRYPTOR;  *;  * language.pbi;  *;--------------------------------------------------------------------------------Global NewMap TEXT$()Procedure.s LANGUAGE( key$ , replacement$ = "" )  Protected s$ = TEXT$(key$)  If FindString(s$, #APP_LANGUAGE_PLACEHOLDER)    s$ = ReplaceString(s$, #APP_LANGUAGE_PLACEHOLDER, replacement$)  EndIf  ProcedureReturn s$EndProcedureProcedure.l get_default_language()    Protected.l n, entries = 66  Protected.s key, val    Restore DEFAULT_LANGUAGE    For n = 0 To entries-1    Read.s key    Read.s val    AddMapElement(TEXT$(), key)    TEXT$(key) = val  Next    info("Set default language 'en', with "+Str(entries)+" entries.")    ProcedureReturn n  EndProcedureProcedure.l load_xml_language( lang_id$ )    Protected.i xml_h, node_main, node_child, node_lang, node_entry  Protected filename$, lang_name$, key$, val$    filename$ = "." + #PS$ + #APP_LANGUAGE_FILE    If FileSize(filename$) < 0    warn("The file '"+filename$+"' did not exist.")    ProcedureReturn 0  EndIf    If lang_id$ = #Null$    info("The parameter [lang_id] is empty.")    ProcedureReturn 0  EndIf    xml_h = LoadXML(#PB_Any, filename$, #PB_UTF8)  If IsXML(xml_h)        If XMLStatus(xml_h) = #PB_XML_Success            node_main = MainXMLNode(xml_h)            node_child = ChildXMLNode(node_main)      While node_child <> 0                If GetXMLNodeName(node_child) = #APP_LANGUAGE_LANGUAGES                    node_lang = ChildXMLNode(node_child)          While node_lang <> 0            If GetXMLAttribute(node_lang, "id") = lang_id$              lang_name$ = GetXMLNodeText(node_lang)              Break            EndIf            node_lang = NextXMLNode(node_lang)          Wend                    If lang_name$ = #Null$            warn("Can't find the language id '"+lang_id$+"'.")            ProcedureReturn 0          EndIf                  ElseIf GetXMLNodeName(node_child) = #APP_LANGUAGE_ENTRY                    key$ = GetXMLAttribute(node_child, "id")          AddMapElement(TEXT$(), key$)                    node_entry = ChildXMLNode(node_child)                    While node_entry <> 0                        If GetXMLAttribute(node_entry, "id") = lang_id$              val$ = GetXMLNodeText(node_entry)              If FindString(val$, "\n")                val$ = ReplaceString(val$, "\n", #NL)              ElseIf FindString(val$, "\t")                val$ = ReplaceString(val$, "\t", #TAB$)              EndIf              TEXT$(key$) = val$              Break            EndIf                        node_entry = NextXMLNode(node_entry)                      Wend                  EndIf                node_child = NextXMLNode(node_child)              Wend            FreeXML(xml_h)          Else      warn("Parsing the XML file '"+filename$+"' results in an error: " + XMLError(xml_h))      ProcedureReturn 0    EndIf      Else    warn("Can't load the file '"+filename$+"' as XML file.")    ProcedureReturn 0  EndIf    ProcedureReturn MapSize(TEXT$())  EndProcedureProcedure.s print_text(text.s, subst_1.s="", subst_2.s="", subst_3.s="", subst_4.s="")  ;EndProcedureDataSection  DEFAULT_LANGUAGE:  Data.s "MENU_FILE", "File"  Data.s "MENU_FILE_NEW", "New"  Data.s "MENU_FILE_OPEN", "Open"  Data.s "MENU_FILE_SAVE", "Save"  Data.s "MENU_FILE_SAVE_AS", "Save as XML"  Data.s "MENU_FILE_SAVE_AS_ENC", "Save as encoded"  Data.s "MENU_FILE_CLOSE", "Close"  Data.s "MENU_FILE_PRINT", "Print"  Data.s "MENU_FILE_QUIT", "Quit"  Data.s "MENU_HELP", "Help"  Data.s "MENU_HELP_ABOUT", "About"  Data.s "TXT_DATA_COMPANY", "Company or website name"  Data.s "TXT_DATA_USERNAME", "Username"  Data.s "TXT_DATA_HOMEPAGE", "Homepage"  Data.s "TXT_DATA_EMAIL", "E-Mail"  Data.s "TXT_DATA_PASSWORD", "Password"  Data.s "TXT_DATA_PASSWORD2", "retype Password"  Data.s "TXT_DATA_COMMENT", "Comment"  Data.s "BTN_DATA_NEW", "New Dataset"  Data.s "BTN_DATA_EDIT", "Edit Dataset"  Data.s "BTN_DATA_DEL", "Delete Dataset"  Data.s "BTN_DATA_SAVE", "Save Dataset"  Data.s "BTN_DATA_CANCEL", "Cancel"  Data.s "TOOLTIP_DATA_START_BROWSER", "Starts your internet browser with this web address."  Data.s "TOOLTIP_DATA_SHOW_PASSWORD", "Show the real password in the input boxes or show only dots."  Data.s "TOOLTIP_DATA_COPY_USERNAME", "Copy the username to the clipboard."  Data.s "TOOLTIP_DATA_COPY_EMAIL", "Copy the email address to the clipboard."  Data.s "TOOLTIP_DATA_COPY_PASSWORD", "Copy the password to the clipboard."  Data.s "TOOLTIP_DATA_GENERATE_PASSWORD", "Generate a strong password."  Data.s "DIALOG_FILE_DIDNT_EXIST_1", "The file"  Data.s "DIALOG_FILE_DIDNT_EXIST_2", "didn't exist or you have insufficient rights to open it."  Data.s "DIALOG_OPEN_FILE", "Select file"  Data.s "DIALOG_DATABASE_WASNT_SAVED", "The database is new and wasn't saved before." + #NL + "Select 'Save As' or 'Save As encrypted' in menu 'File' to save the database."  Data.s "DIALOG_DATABASE_SAVE_XML", "Save database as XML"  Data.s "DIALOG_DATABASE_SAVE_ENC", "Save encoded database"  Data.s "DIALOG_DATASET_DELETE", "Do you want to delete the dataset"  Data.s "DIALOG_ERROR", "Error"  Data.s "DIALOG_WARNING", "Warning"  Data.s "DIALOG_DATASET_ERROR_COMPANY", "You must set a Company Name. Otherwise the data can't be saved."  Data.s "DIALOG_DATASET_COMPANY_EXIST", "The given company name already exist. Choose another."  Data.s "DIALOG_DATASET_PASSWORD_EXIST", "There is already a password, do you want to overwrite?"  Data.s "DIALOG_DATABASE_SAVE_CHANGED", "You have add or edit data, but didn't save the changes." + #NL + "Would you save it now?"  Data.s "DIALOG_DATABASE_SAVE_SUCCESS_1", "File"  Data.s "DIALOG_DATABASE_SAVE_SUCCESS_2", "successfully saved."  Data.s "DIALOG_PASSWORD_TYPE", "Type your password"  Data.s "DIALOG_PASSWORD_TYPE_AGAIN", "Type your password again"  Data.s "DIALOG_PASSWORD_LOCK_FILE", "Type in the password to lock your file"  Data.s "DIALOG_PASSWORD_UNLOCK_FILE", "Type in the password to unlock your file"  Data.s "DIALOG_DATABASE_ALREADY_EXIST_1", "The file"  Data.s "DIALOG_DATABASE_ALREADY_EXIST_2", "already exists. Do you want to overwrite it?"  Data.s "DIALOG_DONT_CHANGE_COMPANY", "You can't change the company name, if you want to do so, add a new dataset with the new name."  Data.s "DIALOG_ABOUT_LICENSE", "License"  Data.s "DIALOG_ABOUT_LICENSES", "Licenses"  Data.s "DIALOG_ABOUT_COMPONENTS", "Components"  Data.s "DIALOG_PWDPREFS_TITLE", "Password settings"  Data.s "DIALOG_PWDPREFS_PWD_LEN", "Password length"  Data.s "DIALOG_PWDPREFS_UPPERS", "Contain upper chars"  Data.s "DIALOG_PWDPREFS_LOWERS", "Contain lower chars"  Data.s "DIALOG_PWDPREFS_NUMBERS", "Contain numbers"  Data.s "DIALOG_PWDPREFS_SPECIAL_CHARS", "Contain special chars"  Data.s "DIALOG_PWDPREFS_REGULAR_CHARS", "Only regular special chars"  Data.s "DIALOG_PWDPREFS_ADD_HYPHEN", "Add hyphen's"  Data.s "DIALOG_PWDPREFS_GENERATE", "Generate Password"  Data.s "DIALOG_PWDPREFS_USE_PWD", "Use password"  Data.s "DIALOG_PRINTER_DATABASE_EMPTY", "There is nothing to print." + #NL + "Load a database or create a new one."  Data.s "LANGUAGE", "English"EndDataSection; IDE Options = PureBasic 5.71 LTS (MacOS X - x64); CursorPosition = 93; FirstLine = 89; Folding = -; EnableXP; EnablePurifier; EnableCompileCount = 0; EnableBuildCount = 0; EnableExeConstant