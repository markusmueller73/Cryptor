;  * CRYPTOR;  *;  * mem_functions.pbi;  *Macro clear_mem( memory , size = #APP_VEC_SIZE )  FillMemory(memory, size, 0, #PB_Byte)EndMacroProcedure.i vecstring_to_mem( string.s , *mem )    Protected.i i, len = Len(string)    If len = 0    info("Empty string.")    ProcedureReturn 0  EndIf    If *mem = 0    warn("Memory isn't allocated.")    ProcedureReturn 0  EndIf    If len % 2 <> 0    len + 1    string + "0"  EndIf    For i = 0 To len-1    PokeB(*mem + i, Val("$"+Mid(string, i*2+1, 2)))  Next    ProcedureReturn @*mem  EndProcedureProcedure.i md5string_to_mem( string.s , *mem )    Protected.i i  Protected.s s    If Len(string) = 0    info("Empty string")    ProcedureReturn 0  EndIf    If *mem = 0    warn("Memory isn't allocated")    ProcedureReturn 0  EndIf    s = StringFingerprint(string, #PB_Cipher_MD5)    If Len(s) <> #APP_VEC_LEN    info("Can't create valid key string")    ProcedureReturn 0  EndIf    For i = 0 To #APP_VEC_SIZE-1    PokeB(*mem + i, Val("$"+Mid(s, i*2+1, 2)))  Next    ProcedureReturn @*mem  EndProcedureProcedure.i sha2string_to_mem( string.s , *mem )    Protected.i i  Protected.s s    If Len(string) = 0    info("Empty string")    ProcedureReturn 0  EndIf    If *mem = 0    warn("Memory isn't allocated")    ProcedureReturn 0  EndIf    s = StringFingerprint(string, #PB_Cipher_SHA2, #APP_SHA2_SIZE)    If Len(s) <> #APP_KEY_LEN    info("Can't create valid key string")    ProcedureReturn 0  EndIf    For i = 0 To #APP_KEY_SIZE-1    PokeB(*mem + i, Val("$"+Mid(s, i*2+1, 2)))  Next    ProcedureReturn @*mem  EndProcedureProcedure.i check_file( filename$ )    If FileSize(filename$) < 0    warn("The file '" + filename$ + "' didn't exist.")    ProcedureReturn 0  EndIf    Protected.i h_file = ReadFile(#PB_Any, filename$)  If IsFile(h_file)        Protected num.l, i.l, b.b, *defvec, *vec        *defvec = AllocateMemory(#APP_VEC_SIZE)    *vec = AllocateMemory(#APP_VEC_SIZE)        md5string_to_mem(#APP_DEFAULT_VECTOR, *defvec)        FileSeek(h_file, 0)    num = ReadLong(h_file)    ReadData(h_file, *vec, #APP_VEC_SIZE)        CloseFile(h_file)        If num = #APP_EXT_L And CompareMemory(*defvec, *vec, #APP_VEC_SIZE)      FreeMemory(*defvec) : FreeMemory(*vec)      ProcedureReturn #APP_DATA_ENCODED    Else      FreeMemory(*defvec) : FreeMemory(*vec)      ProcedureReturn #APP_DATA_XML    EndIf      Else    warn("Can't open the file '" + filename$ + "'.")    ProcedureReturn 0  EndIf    ProcedureReturn 0  EndProcedureProcedure.i get_highest_id( List d.DATASET() )    Protected.i result = 0    ForEach d()        If result < d()\Id      result = d()\Id    EndIf      Next    ProcedureReturn result  EndProcedure; IDE Options = PureBasic 5.73 LTS (Windows - x64); CursorPosition = 81; Folding = --; EnableXP; UseMainFile = main.pb; CompileSourceDirectory; EnablePurifier; EnableCompileCount = 0; EnableBuildCount = 0; EnableExeConstant